'use client'

import React from 'react';
import Link from 'next/link';
import { Category } from '@/lib/types/category';
import categoriesApi from '@/lib/apis/categoriesApi';
import { Book, BookOpen, FileText, GraduationCap, Loader2 } from 'lucide-react';
import { NavigationMenu, NavigationMenuContent, NavigationMenuItem, NavigationMenuLink, NavigationMenuList, NavigationMenuTrigger, navigationMenuTriggerStyle } from '../ui/navigation-menu';
import { cn } from '@/lib/utils';


const categoryIcons: Record<string, React.ReactNode> = {
  "S√°ch gi√°o tr√¨nh": <Book className="h-5 w-5 text-primary" />,
  "T√†i li·ªáu tham kh√°o": <BookOpen className="h-5 w-5 text-primary" />,
  "T√†i li·ªáu chuy√™n ng√†nh 1": <FileText className="h-5 w-5 text-primary" />,
  "T√†i li·ªáu ngo·∫°i ng·ªØ": <GraduationCap className="h-5 w-5 text-primary" />,
}

// Bi·ªÉu t∆∞·ª£ng cho c√°c danh m·ª•c con ngo·∫°i ng·ªØ
const languageIcons: Record<string, string> = {
  "T√†i li·ªáu ti·∫øng anh": "üá¨üáß",
  "T√†i li·ªáu ti·∫øng trung": "üá®üá≥",
  "T√†i li·ªáu ti·∫øng nh·∫≠t": "üáØüáµ",
  "T√†i li·ªáu ti·∫øng h√†n": "üá∞üá∑",
  "T√†i li·ªáu ti·∫øng ph√°p": "üá´üá∑",
  "T√†i li·ªáu ti·∫øng ƒë·ª©c": "üá©üá™",
}

export function CategoryNavigation() {
  const [categories, setCategories] = React.useState<Category[]>([])
  const [loading, setLoading] = React.useState(true)

  React.useEffect(() => {
    const loadCategories = async () => {
      try {
        const data = await categoriesApi.getCategories()
        console.log("Categories loaded:", data)
        setCategories(data)
      } catch (error) {
        console.error("Failed to load categories:", error)
      } finally {
        setLoading(false)
      }
    }

    loadCategories()
  }, [])

  const foreignLanguageCategory = categories.find((cat) => cat.name.toLowerCase().includes("ngo·∫°i ng·ªØ"))

  const examPrepCategory = categories.find((cat) => cat.name.toLowerCase().includes("√¥n thi"))

  const mainCategories = categories.filter(
    (cat) => cat.id !== foreignLanguageCategory?.id && cat.id !== examPrepCategory?.id,
  )

  if (loading) {
    return (
      <div className="flex items-center justify-center h-10">
        <Loader2 className="h-5 w-5 animate-spin text-muted-foreground" />
      </div>
    )
  }

  return (
    <NavigationMenu className="max-w-full w-full justify-center">
      <NavigationMenuList className="flex flex-wrap justify-center">
        {/* C√°c danh m·ª•c ch√≠nh */}
        {mainCategories.map((category) => (
          <NavigationMenuItem key={category.id}>
            <Link href={`/category/${category.slug}`} legacyBehavior passHref>
              <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                {category.name.toUpperCase()}
              </NavigationMenuLink>
            </Link>
          </NavigationMenuItem>
        ))}

        {/* Danh m·ª•c NGO·∫†I NG·ªÆ v·ªõi c√°c danh m·ª•c con */}
        {foreignLanguageCategory && (
          <NavigationMenuItem>
            <NavigationMenuTrigger>{foreignLanguageCategory.name.toUpperCase()}</NavigationMenuTrigger>
            <NavigationMenuContent>
              <ul className="grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px]">
                {foreignLanguageCategory.children?.map((language) => (
                  <ListItem
                    key={language.id}
                    title={language.name}
                    href={`/category/${language.slug}`}
                    icon={languageIcons[language.name.toLowerCase()] || "üåê"}
                  >
                    {language.description || `T√†i li·ªáu h·ªçc ${language.name}`}
                  </ListItem>
                ))}
                {/* N·∫øu kh√¥ng c√≥ danh m·ª•c con, hi·ªÉn th·ªã link ƒë·∫øn danh m·ª•c ch√≠nh */}
                {(!foreignLanguageCategory.children || foreignLanguageCategory.children.length === 0) && (
                  <ListItem
                    title={foreignLanguageCategory.name}
                    href={`/category/${foreignLanguageCategory.slug}`}
                    icon="üåê"
                  >
                    {foreignLanguageCategory.description || "T√†i li·ªáu h·ªçc ngo·∫°i ng·ªØ c√°c lo·∫°i"}
                  </ListItem>
                )}
              </ul>
            </NavigationMenuContent>
          </NavigationMenuItem>
        )}

        {/* Danh m·ª•c T√ÄI LI·ªÜU √îN THI v·ªõi c√°c danh m·ª•c con */}
        {examPrepCategory && (
          <NavigationMenuItem>
            <NavigationMenuTrigger>{examPrepCategory.name.toUpperCase()}</NavigationMenuTrigger>
            <NavigationMenuContent>
              <ul className="grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px]">
                {examPrepCategory.children?.map((exam) => (
                  <ListItem key={exam.id} title={exam.name} href={`/category/${exam.slug}`}>
                    {exam.description || `T√†i li·ªáu √¥n thi ${exam.name}`}
                  </ListItem>
                ))}
                {/* N·∫øu kh√¥ng c√≥ danh m·ª•c con, hi·ªÉn th·ªã link ƒë·∫øn danh m·ª•c ch√≠nh */}
                {(!examPrepCategory.children || examPrepCategory.children.length === 0) && (
                  <ListItem title={examPrepCategory.name} href={`/category/${examPrepCategory.slug}`}>
                    {examPrepCategory.description || "T√†i li·ªáu √¥n thi c√°c lo·∫°i"}
                  </ListItem>
                )}
              </ul>
            </NavigationMenuContent>
          </NavigationMenuItem>
        )}
      </NavigationMenuList>
    </NavigationMenu>
  );
};

interface ListItemProps extends React.ComponentPropsWithoutRef<"a"> {
  title: string
  href: string
  icon?: React.ReactNode
}

const ListItem = React.forwardRef<React.ComponentRef<"a">, ListItemProps>(
  ({ className, title, icon, children, href, ...props }, ref) => {
    return (
      <li>
        <NavigationMenuLink asChild>
          <a
            ref={ref}
            href={href}
            className={cn(
              "block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
              className,
            )}
            {...props}
          >
            <div className="flex items-center gap-2">
              {icon && <span className="text-lg">{icon}</span>}
              <span className="text-sm font-medium leading-none">{title}</span>
            </div>
            <p className="line-clamp-2 text-sm leading-snug text-muted-foreground">{children}</p>
          </a>
        </NavigationMenuLink>
      </li>
    )
  },
)
ListItem.displayName = "ListItem"
